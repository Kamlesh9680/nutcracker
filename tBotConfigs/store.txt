import os
from dotenv import load_dotenv
import re
import asyncio
import uvloop
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import pymongo
from pymongo import MongoClient
import datetime
import secrets

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

load_dotenv()

MONGO_URI = os.getenv("mongoDB_uri")
client = MongoClient(MONGO_URI)
db = client["nutCracker"]
videoCollection = db["videosRecord"]
userCollection = db["userRecord"]

videoConverterToken = os.getenv("bot1Token")
API_ID = os.getenv("api_id")
API_HASH = os.getenv("api_hash")

app = Client("my_bot", api_id=API_ID, api_hash=API_HASH, bot_token=videoConverterToken)

def generate_random_hex(length):
    characters = 'abcdef0123456789'
    random_hex = ''.join(secrets.choice(characters) for _ in range(length))
    return random_hex

def get_user_record(user_id):
    userInformation = userCollection.find_one({"userId": user_id})
    print(userInformation)
    return userInformation

def insert_user_record(user_id, userName):
    userCollection.insert_one(
        {
            "userId": user_id,
            "userName": userName,
            "upiNumber": 0,
            "uploadedVideos": 0,
            "createdAt": datetime.datetime.now(),
        }
    )
    return "Done! User record inserted successfully."

@app.on_message(filters.command("start"))
async def startCommand(bot, message):
    user_id = message.from_user.id
    userName = (message.from_user.username) or " "
    user_record = get_user_record(user_id)
    first = message.from_user.first_name
    if user_record:
        await bot.send_message(message.chat.id, f"Welcome back! ....")
    else:
        print("new")
        insert_user_record(user_id, userName)
        await bot.send_message(
            message.chat.id,
            f"Welcome! {first}\n\nWe're glad you're here.\nTo start using our platform\nYou can start sharing videos directly\n\n Note: If anything went wrong don't worry about it as we are on testing phase",
        )

@app.on_message(filters.command("getmyuserid"))
async def getUserId(bot, message):
    user_id = message.from_user.id
    await bot.send_message(
        message.chat.id, f"""Here is your ðŸ‘¤ user id:\n\n {user_id}"""
    )

# Other command handlers...

@app.on_message(filters.video)
async def handle_video(bot, message: Message):
    messageInit = await message.reply("Processing request...")
    try:
        user_id = message.from_user.id
        file_id = message.video.file_id
        video_path = await bot.download_media(file_id, file_name="../public/uploads/")
        video_file = open(video_path, "rb")
        fileName = os.path.basename(video_path)
        try:
            fileUniqueId = generate_random_hex(24)  # Generate a random hexadecimal string of length 24
            video_info = {
                "videoName": fileName,
                "fileLocalPath": f"/public/uploads/{fileName}",
                "file_size": message.video.file_size,
                "duration": message.video.duration,
                "mime_type": message.video.mime_type,
                "fileUniqueId": fileUniqueId,
                "relatedUser:": user_id,
                "userName": message.from_user.username or "",
            }
            videoCollection.insert_one(video_info)
        except Exception as e:
            print(e)
            return
        videoUrl = f"http://nutcracker.live/video/{fileUniqueId}"
        await message.reply(
            f"""Your video has been uploaded successfully... \n\nðŸ˜ŠðŸ˜ŠNow you can start using the link:\n\n{videoUrl}"""
        )
        await messageInit.delete()
    except Exception as e:
        print(e)
        await messageInit.edit(
            f"An error occurred while processing your request. Please try again later."
        )
        return

# Other message handlers...

app.run()
