bot.command("withdraw", async (ctx) => {
    // Initialize ctx.session if it's undefined
        ctx.session = {};

    const user_id = ctx.message.from.id;
    const user_record = await get_user_record(user_id);

    if (!user_record) {
        await ctx.reply("You don't have a user record. Please contact support for assistance.");
        return;
    }

    const withdrawal_record = await withdrawalCollection.findOne({ userId: user_id });

    if (withdrawal_record) {
        // Withdrawal record found, ask for withdrawal amount
        await ctx.reply("Enter the withdrawal amount in dollars:");
        ctx.session.withdrawalRecord = withdrawal_record; // Store the withdrawal record in the session
    } else {
        // No withdrawal record found, ask for bank details
        await ctx.reply("Please provide the name of your bank:");
        ctx.session.expectingBankName = true;
    }
});

// Handle user's response to each question
bot.on("text", async (ctx) => {
    const user_id = ctx.message.from.id;
    const { expectingBankName, expectingAccountNo, expectingIFSC, expectingAccountHolderName, expectingWithdrawalAmount } = ctx.session;

    if (expectingBankName) {
        // Save the bank name
        ctx.session.bankName = ctx.message.text;

        // Ask for the account number
        await ctx.reply("Please provide your account number:");
        ctx.session.expectingBankName = false;
        ctx.session.expectingAccountNo = true;
    } else if (expectingAccountNo) {
        // Save the account number
        ctx.session.accountNo = ctx.message.text;

        // Ask for the IFSC code
        await ctx.reply("Please provide the IFSC code:");
        ctx.session.expectingAccountNo = false;
        ctx.session.expectingIFSC = true;
    } else if (expectingIFSC) {
        // Save the IFSC code
        ctx.session.ifsc = ctx.message.text;

        // Ask for the account holder's name
        await ctx.reply("Please provide the name of the account holder:");
        ctx.session.expectingIFSC = false;
        ctx.session.expectingAccountHolderName = true;
    } else if (expectingAccountHolderName) {
        // Save the account holder's name
        ctx.session.accountHolderName = ctx.message.text;

        // All details collected, proceed to save in database
        const success = await saveBankDetails(user_id, ctx.session.bankName, ctx.session.accountNo, ctx.session.ifsc, ctx.session.accountHolderName);

        if (success) {
            await ctx.reply("Your bank details have been saved successfully.");
            // Ask for the withdrawal amount
            await ctx.reply("Please enter the withdrawal amount in dollars:");
            ctx.session.expectingAccountHolderName = false;
            ctx.session.expectingWithdrawalAmount = true;
        } else {
            await ctx.reply("Failed to save your bank details. Please try again later.");
            // Reset the session
            ctx.session = {};
        }
    } else if (expectingWithdrawalAmount) {
        const withdrawalAmount = parseFloat(ctx.message.text);
        if (isNaN(withdrawalAmount) || withdrawalAmount <= 0) {
            await ctx.reply("Invalid withdrawal amount. Please enter a valid amount in dollars.");
            return;
        }

        // Retrieve user's earnings from the user record
        const userRecord = await userCollection.findOne({ userId: user_id });
        const totalEarnings = userRecord.totalEarnings || 0;

        // Check if withdrawal amount exceeds user earnings
        if (withdrawalAmount > totalEarnings) {
            await ctx.reply(`Your Total Earnings: ${totalEarnings} $\nWithdrawal amount exceeds your earnings. Please enter a valid withdrawal amount.`);
            return;
        }

        // Proceed with processing the withdrawal request
        const withdrawalSuccess = await processWithdrawalRequest(user_id, withdrawalAmount);

        if (withdrawalSuccess) {
            await ctx.reply("Your withdrawal request has been processed successfully. It will be processed in 48 hours.");
            // Update total earnings in userCollection
            const newTotalEarnings = totalEarnings - withdrawalAmount;
            await userCollection.updateOne({ userId: user_id }, { $set: { totalEarnings: newTotalEarnings } });
        } else {
            await ctx.reply("Failed to process your withdrawal request. Please try again later.");
        }

        // Reset the session
        ctx.session = {};
    }
});



async def process_video_link(video_link: str, user_id: int, sender_username: str) -> str:
    # Check if the video link is from terabox
    if "terabox" not in video_link:
        return "Only terabox links are supported."

    try:
        # Attempt to request the video link headers to check if the video is playable
        response = requests.head(video_link, allow_redirects=True)
        content_type = response.headers.get("content-type")
        
        # Check if the content type is video
        if content_type and "video" in content_type:
            # Download and store the video
            video_path = download_and_store_video(video_link)
            
            # Check if video_path is None
            if video_path is None:
                return "Failed to download and store the video."
            
            # Generate unique ID for the video
            videoId = generate_random_hex(24)
            
            # Prepare video info to store in the database
            video_info = {
                "filename": os.path.basename(video_path),
                "fileLocalPath": f"../uploads/{videoId}",
                "file_size": os.path.getsize(video_path),
                "duration": 0,  # Update with actual duration if available
                "mime_type": "video/mp4",  # Update with actual MIME type if available
                "uniqueLink": videoId,
                "relatedUser": user_id,
                "userName": sender_username or "",
            }
            videoCollection.insert_one(video_info)
            
            # Generate URL for the uploaded video
            videoUrl = f"http://nutcracker.live/play/{videoId}"
            return videoUrl
        else:
            return "The provided link does not point to a playable video."
    except Exception as e:
        print(e)
        return "An error occurred while processing the video link."

